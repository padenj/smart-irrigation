name: Build and Release with Semantic Versioning

on:
  push:
    branches:
      - main # Trigger workflow only on pushes to the main branchtags:
    tags:
      - '!*'  # Exclude all tag pushes

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20 # Change to your Node.js version

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Update semantic version
      id: versioning
      run: |
        echo "Determining semantic version..."
        git fetch --tags origin
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        if [ "$CURRENT_VERSION" = "0.0.0" ]; then
          NEW_VERSION="1.0.0"
        else
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++; print}')
        fi
        echo $NEW_VERSION > version.txt
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "CurrentVersion: $CURRENT_VERSION | New version: $NEW_VERSION"

    - name: Tag new semantic version
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        if git rev-parse "refs/tags/$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag $NEW_VERSION already exists. Skipping tagging."
        else
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
        fi

    - name: Include version in build
      run: cp version.txt ./dist/

    - name: Create release package
      run: zip -r release-package.zip . -x '*.git*' 'node_modules/*' 'src/*'

    - name: Upload to GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: release-package.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.NEW_VERSION }}
        name: Release ${{ env.NEW_VERSION }}
